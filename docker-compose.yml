services:
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    networks:
      - default
    ports:
      - "5000:5000"
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - MLFLOW_S3_ENDPOINT_URL=https://s3.amazonaws.com
      - MLFLOW_ARTIFACT_ROOT=s3://s3bucketname/mlflow
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://airflow:airflow@db/mlflow
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - mlflow_data:/mlflow

  airflow-init:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.1}
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@db/airflow
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@db/airflow
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=${WEBSERVER_SECRET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - _PIP_ADDITIONAL_REQUIREMENTS=${_PIP_ADDITIONAL_REQUIREMENTS:-}
    user: "${AIRFLOW_UID}:0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
      - ./.env:/opt/airflow/.env
    depends_on:
      db:
        condition: service_healthy

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow    
    networks:
      - default
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@db/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AWS_DEFAULT_REGION=us-east-1
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
    command: webserver
    depends_on:
      db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-scheduler:
        condition: service_started
    
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow    
    networks:
      - default
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@db/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AWS_DEFAULT_REGION=us-east-1
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
    command: scheduler
    depends_on:
      db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  db:
    image: postgres:13
    container_name: airflow_db
    networks:
      - default
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    restart: always

volumes:
  postgres_data:
  mlflow_data:
  
